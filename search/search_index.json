{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ProblemGenerator","text":"<p><code>ProblemGenerator</code> es un m\u00f3dulo de Julia dise\u00f1ado para facilitar la creaci\u00f3n y manipulaci\u00f3n de problemas de optimizaci\u00f3n binivel. Este m\u00f3dulo proporciona herramientas para generar estructuras jer\u00e1rquicas de optimizaci\u00f3n, definir funciones objetivo y restricciones, y configurar puntos estacionarios espec\u00edficos.</p>"},{"location":"#que-es-un-problema-binivel","title":"\u00bfQu\u00e9 es un problema binivel?","text":"<p>Un problema binivel es un tipo de problema de optimizaci\u00f3n jer\u00e1rquica que involucra dos niveles de toma de decisiones:</p> <ul> <li>Nivel superior (l\u00edder): Toma decisiones que influyen en el nivel inferior.</li> <li>Nivel inferior (seguidor): Responde a las decisiones del l\u00edder, optimizando sus propios objetivos.</li> </ul> <p>Estos problemas son comunes en campos como econom\u00eda, ingenier\u00eda y ciencias de la decisi\u00f3n, donde las interacciones entre diferentes actores deben modelarse matem\u00e1ticamente.</p>"},{"location":"#caracteristicas-principales-de-problemgenerator","title":"Caracter\u00edsticas principales de ProblemGenerator","text":"<ul> <li>Transformaci\u00f3n MPEC: Convierte problemas binivel en programas matem\u00e1ticos con restricciones de complementariedad (MPEC) que sean estacionarios en el punto dado.<ul> <li>Clasificaci\u00f3n de puntos estacionarios:</li> <li>Fuertemente estacionario:   Multiplicadores estrictamente positivos.</li> <li>M-estacionario: Multiplicadores no  negativos con condiciones de     complementariedad.</li> <li>C-estacionario: Relaci\u00f3n    multiplicativa no negativa entre par\u00e1metros.</li> </ul> </li> <li>Interfaz intuitiva: Define variables, funciones objetivo y restricciones de manera sencilla utilizando la sintaxis de Julia y Symbolics.jl.</li> </ul>"},{"location":"#primeros-pasos","title":"Primeros pasos","text":""},{"location":"#instalacion","title":"Instalaci\u00f3n","text":"<p>Para instalar <code>ProblemGenerator</code>, aseg\u00farate de tener Julia instalado y ejecuta el siguiente comando en tu entorno:</p> <pre><code>using Pkg\nPkg.add(\"ProblemGenerator\")\n</code></pre>"},{"location":"#documentacion-completa","title":"Documentaci\u00f3n completa","text":"<p>Para obtener m\u00e1s detalles sobre las funciones y caracter\u00edsticas del m\u00f3dulo, consulta las siguientes secciones: - Fundamentos te\u00f3ricos: Conceptos matem\u00e1ticos detr\u00e1s de los problemas binivel. - Especificaci\u00f3n t\u00e9cnica de funciones: Descripci\u00f3n detallada de las funciones principales. - Ejemplo completo: Un caso pr\u00e1ctico paso a paso.</p>"},{"location":"#contribuciones","title":"Contribuciones","text":"<p>\u00a1Contribuciones son bienvenidas! Si deseas colaborar o reportar problemas, visita el repositorio oficial de <code>ProblemGenerator</code> en GitHub.</p> <p>Enlace al repositorio</p>"},{"location":"ejemplo/","title":"Ejemplo b\u00e1sico","text":""},{"location":"ejemplo/#caso-de-estudio-generacion-de-punto-fuertemente-estacionario","title":"Caso de Estudio: Generaci\u00f3n de Punto Fuertemente Estacionario","text":""},{"location":"ejemplo/#problema-de-referencia","title":"Problema de Referencia","text":"\\begin{aligned} &amp;\\min_{x_1,x_2} x_1^2y_1^2y_2 + x_2 \\\\ &amp;\\ \\text{s.t.}\\ x_1 + y_2 - y_1 \\leq 9 \\\\ &amp;\\ \\ \\ \\ \\min_{y_1,y_2} x_2^2y_1^2y_2 + x_1 \\\\ &amp;\\ \\ \\ \\ \\text{s.t.}\\ x_1^2y_1^2 + x_2 \\leq 0 \\end{aligned}  <p>Componentes del problema: 1. Nivel Superior    - Variables: x_1, x_2    - Objetivo: Minimizar x_1^2 y_1^2 y_2 + x_2    - Restricci\u00f3n: x_1 + y_2 - y_1 \\leq 9 2. Nivel Inferior    - Variables: y_1, y_2    - Objetivo: Minimizar x_2^2 y_1^2 y_2 + x_1    - Restricci\u00f3n: x_1^2 y_1^2 + x_2 \\leq 0</p>"},{"location":"ejemplo/#implementacion-en-julia","title":"Implementaci\u00f3n en Julia","text":"<pre><code>using ProblemGenerator\nusing Symbolics\n\n# 1. Configuraci\u00f3n inicial\nmodel = GeneratorModel()\n\n# 2. Declaraci\u00f3n de variables con alcance jer\u00e1rquico\n@variables Upper(model) x_1 x_2  # Variables l\u00edder\n@variables Lower(model) y_1 y_2  # Variables seguidor\n\n# 3. Objetivo del l\u00edder (funci\u00f3n no convexa)\nSetObjectiveFunction(Upper(model), x_1^2 * y\u2081^2 * y_2 + x_2)\n\n# 4. Restricci\u00f3n l\u00edder activa con \u03bc=0.3\nSetLeaderRestriction(model, x_1 + y_2 - y_1 \u2264 9, J_0_g, 0.3)\n\n# 5. Objetivo del seguidor (acoplamiento cruzado)\nSetObjectiveFunction(Lower(model), x_2^2 * y_1^2 * y_2 + x_1)\n\n# 6. Restricci\u00f3n seguidor con par\u00e1metros para fuerte estacionariedad\nSetFollowerRestriction(\n    model,\n    x_1^2 * y_1^2 + x_2 \u2264 0,\n    J_Ne_L0_v,  # Tipo de restricci\u00f3n\n    0.1,        # \u03b2 &gt; 0\n    0.4,        # \u03bb &gt; 0 \n    0           # \u03b3 = 0\n)\n\n# 7. Fijaci\u00f3n del punto estacionario deseado\nSetPoint(model, Dict(\n    x_1 =&gt; 1.0,\n    x_2 =&gt; 1.0,\n    y_1 =&gt; 1.0,\n    y_2 =&gt; 1.0\n))\n\n# 8. Generaci\u00f3n del problema MPEC\nproblem = CreateProblem(model)\n</code></pre>"},{"location":"ejemplo/#explicacion-paso-a-paso","title":"Explicaci\u00f3n Paso a Paso","text":"<ol> <li>Inicializaci\u00f3n del Modelo: Creamos un modelo vac\u00edo con <code>GeneratorModel()</code>.</li> <li>Declaraci\u00f3n de Variables:</li> <li><code>x\u2081, x\u2082</code> como variables de decisi\u00f3n del l\u00edder.</li> <li><code>y\u2081, y\u2082</code> como variables del seguidor.</li> <li>Funci\u00f3n Objetivo del L\u00edder: Se establece minimizar x_1^2 y_1^2 y_2 + x_2.</li> <li>Restricci\u00f3n del L\u00edder: </li> <li>Expresi\u00f3n: x_1 + y_2 - y_1 \\leq 9.</li> <li>Usa el tipo de restricci\u00f3n <code>J_0_g</code> con \\mu=0.3.</li> <li>Funci\u00f3n Objetivo del Seguidor: Minimizar x_2^2 y_1^2 y_2 + x_1.</li> <li>Restricci\u00f3n del Seguidor:</li> <li>Expresi\u00f3n: x_1^2 y_1^2 + x_2 \\leq 0.</li> <li>Par\u00e1metros: \\beta=0.1, \\lambda=0.4, \\gamma=0.</li> <li>Punto Inicial: Todas las variables se inicializan en 1.0.</li> <li>Generaci\u00f3n Final: Crea la estructura completa del problema binivel.</li> </ol>"},{"location":"ejemplo/#flujo-de-trabajo-recomendado","title":"Flujo de Trabajo Recomendado","text":"<ol> <li>Definir estructura b\u00e1sica del problema binivel.</li> <li>Especificar punto estacionario objetivo.</li> <li>Seleccionar tipo de estacionariedad requerida.</li> <li>Asignar multiplicadores seg\u00fan clasificaci\u00f3n deseada.</li> <li>Generar y validar problema MPEC resultante.</li> <li>Exportar para an\u00e1lisis con solvers externos.</li> </ol> <p>Esta documentaci\u00f3n permanece estable ante cambios en la estructura de la tesis al enfocarse en conceptos matem\u00e1ticos fundamentales en lugar de referencias espec\u00edficas a secciones.</p>"},{"location":"funciones/","title":"M\u00f3dulo Generador de Problemas Binivel","text":""},{"location":"funciones/#especificacion-tecnica-de-funciones","title":"Especificaci\u00f3n T\u00e9cnica de Funciones","text":""},{"location":"funciones/#1-generatormodel","title":"1. <code>GeneratorModel</code>","text":"<pre><code>function GeneratorModel(alpha::Vector{Number} = [])\n</code></pre> <p>Inicializa un modelo binivel con par\u00e1metros de regularizaci\u00f3n.</p> <p>Descripci\u00f3n: - Construye una estructura de optimizaci\u00f3n jer\u00e1rquica. - Prepara almacenamiento para restricciones y multiplicadores. - Si <code>alpha != []</code>, activa modo de perturbaci\u00f3n para condiciones degeneradas.</p> <p>Uso t\u00edpico:</p> <pre><code>model = GeneratorModel()\n</code></pre>"},{"location":"funciones/#2-setobjectivefunction","title":"2. <code>SetObjectiveFunction</code>","text":"<pre><code>function SetObjectiveFunction(problem::Problem, expr::Symbolics.Num)\n</code></pre> <p>Define funciones objetivo para l\u00edder/seguidor manteniendo trazabilidad de variables.</p> <p>Relaci\u00f3n con teor\u00eda: - Preserva la estructura no lineal original para an\u00e1lisis de convexidad. - Permite verificaci\u00f3n autom\u00e1tica de dominios factibles.</p> <p>Par\u00e1metros: - <code>problem::Problem</code>: Problema (<code>Upper(model)</code> o <code>Lower(model)</code>). - <code>expr::Symbolics.Num</code>: Expresi\u00f3n simb\u00f3lica de la funci\u00f3n objetivo.</p>"},{"location":"funciones/#3-setleaderrestriction","title":"3. <code>SetLeaderRestriction</code>","text":"<pre><code>function SetLeaderRestriction(\n    model::OptimizationModel,\n    expr::Symbolics.Num,\n    restriction_type::RestrictionSetType,\n    miu::Number\n)\n</code></pre> <p>Gestiona restricciones del nivel superior con multiplicadores asociados.</p> <p>Tipos de restricci\u00f3n:</p> <code>RestrictionSetType</code> Condici\u00f3n Uso t\u00edpico <code>J_0_g</code> Restricci\u00f3n activa (g_i = 0) Puntos fuertemente estacionarios <code>Normal</code> Restricci\u00f3n inactiva Regiones factibles generales <p>Par\u00e1metros: - <code>model::OptimizationModel</code>: Modelo a modificar. - <code>expr::Symbolics.Num</code>: Expresi\u00f3n de la restricci\u00f3n. - <code>restriction_set_type::RestrictionSetType</code>: Tipo de restricci\u00f3n. - <code>miu::Number</code>: Par\u00e1metro de perturbaci\u00f3n.</p>"},{"location":"funciones/#4-setfollowerrestriction","title":"4. <code>SetFollowerRestriction</code>","text":"<pre><code>function SetFollowerRestriction(\n    model::OptimizationModel,\n    expr::Symbolics.Num,\n    restriction_type::RestrictionSetType,\n    beta::Number,\n    lambda::Number,\n    gamma::Number = 0\n)\n</code></pre> <p>Configura restricciones del seguidor con control de multiplicadores duales.</p> <p>Par\u00e1metros: - <code>model::OptimizationModel</code>: Modelo a modificar. - <code>expr::Symbolics.Num</code>: Expresi\u00f3n de la restricci\u00f3n. - <code>restriction_set_type::RestrictionSetType</code>: Tipo de restricci\u00f3n. - <code>beta::Number</code>: Par\u00e1metro de regularizaci\u00f3n. - <code>lambda::Number</code>: Par\u00e1metro dual. - <code>gamma::Number</code>: Par\u00e1metro de perturbaci\u00f3n (opcional).</p>"},{"location":"funciones/#5-setpoint","title":"5. <code>SetPoint</code>","text":"<pre><code>function SetPoint(model::OptimizationModel, point::Dict)\n</code></pre> <p>Establece punto inicial para las variables.</p> <p>Par\u00e1metros: - <code>model::OptimizationModel</code>: Modelo a modificar. - <code>point::Dict</code>: Diccionario con asignaciones variable-valor.</p>"},{"location":"funciones/#tipos-de-restricciones-implementacion-interna","title":"Tipos de Restricciones (Implementaci\u00f3n Interna)","text":"<pre><code>@enum RestrictionSetType begin\n    Normal     # Restricci\u00f3n no activa\n    J_0_g      # Restricci\u00f3n l\u00edder en punto activo\n    J_0_LP_v   # Restricci\u00f3n seguidor con multiplicador positivo\n    J_0_L0_v   # Restricci\u00f3n seguidor activa con \u03bb=0 \n    J_Ne_L0_v  # Restricci\u00f3n seguidor inactiva con \u03bb=0\nend\n</code></pre> <p>Relaci\u00f3n con condiciones KKT: - <code>J_0_LP_v</code>: Corresponde a \\lambda_j &gt; 0 en condiciones de complementariedad. - <code>J_Ne_L0_v</code>: Usado para perturbaciones que mantienen factibilidad. - <code>J_0_g</code>: Fundamental para garantizar calificaciones de restricciones.</p>"},{"location":"fundamentos/","title":"Fundamentos Te\u00f3ricos","text":"<p>Este m\u00f3dulo implementa un generador de problemas binivel con puntos estacionarios espec\u00edficos, basado en los siguientes conceptos fundamentales:</p> <ol> <li>Transformaci\u00f3n MPEC: Conversi\u00f3n de problemas binivel en programas matem\u00e1ticos con restricciones de complementariedad.</li> <li>Clasificaci\u00f3n de puntos estacionarios:</li> <li>Fuertemente estacionario: Multiplicadores estrictamente positivos.</li> <li>M-estacionario: Multiplicadores no negativos con condiciones de complementariedad.</li> <li>C-estacionario: Relaci\u00f3n multiplicativa no negativa entre par\u00e1metros.</li> <li>Condiciones KKT: Manejo de multiplicadores para restricciones activas/inactivas.</li> </ol> <p>Estos conceptos permiten generar problemas binivel con propiedades espec\u00edficas, facilitando su an\u00e1lisis y resoluci\u00f3n mediante solvers externos.</p>"},{"location":"fundamentos/#estrategias-de-parametrizacion","title":"Estrategias de Parametrizaci\u00f3n","text":"<p>Las siguientes condiciones definen los diferentes tipos de estacionariedad en funci\u00f3n de los par\u00e1metros \\beta_i y \\gamma_i:</p>  \\begin{aligned} &amp;\\textbf{C-estacionario:} &amp;&amp; \\beta_i \\cdot \\gamma_i \\geq 0 \\\\ &amp;\\textbf{M-estacionario:} &amp;&amp; \\begin{cases} \\beta_i &gt; 0, \\gamma_i = 0 &amp; \\text{(multiplicador $\\beta_i$ licbre, $\\gamma_i$ fijo)} \\\\ \\gamma_i &gt; 0, \\beta_i = 0 &amp; \\text{(multiplicador $\\gamma_i$ libre, $\\beta_i$ fijo)} \\end{cases} \\\\ &amp;\\textbf{Fuertemente estacionario:} &amp;&amp; \\beta_i &gt; 0, \\gamma_i &gt; 0 \\end{aligned}"},{"location":"install/","title":"Instalar el m\u00f3dulo","text":"<p>Para instalar del modulo de julia es necesario instalar las siguientes dependencias:</p> <pre><code>using Pkg; \nPkg.add(\"Symbolics\"); \nPkg.add(\"LinearAlgebra\");\n\n</code></pre> <p>Desde el script a utilizar usar importa el siguiente codigo :</p> <pre><code>include(\"./def_problem/solver.jl\")\n\n</code></pre>"},{"location":"api/","title":"Documentaci\u00f3n de la API","text":"<p>La API de <code>ProblemGenerator</code> permite generar un archivo Excel a partir de la definici\u00f3n de un problema binivel. La API se comunica mediante peticiones HTTP y acepta un objeto JSON con la estructura necesaria para definir variables, funciones objetivo, restricciones y otros par\u00e1metros del problema. A continuaci\u00f3n se detalla el uso de los endpoints y se dan ejemplos pr\u00e1cticos.</p>"},{"location":"api/#endpoints-disponibles","title":"Endpoints Disponibles","text":""},{"location":"api/#1-get-test","title":"1. GET <code>/test</code>","text":"<ul> <li>Descripci\u00f3n:   Este endpoint sirve para realizar una prueba r\u00e1pida y verificar que la API se encuentra activa.  </li> <li>Respuesta:   Devuelve un objeto JSON con el siguiente formato:</li> </ul> <p><code>json   {       \"message\": \"\u00a1Hola! Esta es la subdirecci\u00f3n /test\"   }</code></p> <ul> <li>Ejemplo de uso con cURL:</li> </ul> <p><code>bash   curl -X GET http://&lt;dominio_o_ip&gt;/test</code></p>"},{"location":"api/#2-post-problemgenerator","title":"2. POST <code>/problemgenerator</code>","text":"<ul> <li> <p>Descripci\u00f3n:   Este endpoint procesa una petici\u00f3n POST que contiene la definici\u00f3n del problema en formato JSON. La API procesa la informaci\u00f3n, genera el problema MPEC y devuelve un archivo Excel con los datos resultantes.</p> </li> <li> <p>Cuerpo de la Petici\u00f3n (JSON):</p> </li> </ul> <p>El JSON que se env\u00eda debe tener la siguiente estructura:</p> <p><code>json   {       \"vars\": {           \"leader\": [],           \"follower\": []       },       \"objective_function\": {           \"leader\": \"\",           \"follower\": \"\"       },       \"restrictions\": {           \"leader\": [               {                   \"expresion\": \"\",                   \"restriction_type\": \"\",                   \"active_index_type\": \"\",                   \"miu\": 0.4               }           ],           \"follower\": [               {                   \"expresion\": \"\",                   \"restriction_type\": \"\",                   \"active_index_type\": \"\",                   \"lambda\": 0.1,                   \"beta\": 0.9,                   \"gamma\": 0.4               }           ]       },       \"is_alpha_zero\": false,       \"alpha_vec\": [2.3, 293],       \"point\": {           \"x_1\": 2.2       }   }</code></p> <p>Descripci\u00f3n de los campos principales:</p> <ul> <li> <p><code>vars</code>:  </p> <ul> <li><code>leader</code>: Lista de variables de nivel superior (l\u00edder).  </li> <li><code>follower</code>: Lista de variables de nivel inferior (seguidor).</li> </ul> </li> <li> <p><code>objective_function</code>:  </p> <ul> <li><code>leader</code>: Expresi\u00f3n de la funci\u00f3n objetivo del l\u00edder.  </li> <li><code>follower</code>: Expresi\u00f3n de la funci\u00f3n objetivo del seguidor.</li> </ul> </li> <li> <p><code>restrictions</code>:     Contiene las restricciones tanto para el l\u00edder como para el seguidor.</p> <ul> <li>Para el l\u00edder: Cada restricci\u00f3n es un objeto con los campos <code>expresion</code>, <code>restriction_type</code>, <code>active_index_type</code> y <code>miu</code>.</li> <li>Para el seguidor: Cada restricci\u00f3n es un objeto con los campos <code>expresion</code>, <code>restriction_type</code>, <code>active_index_type</code>, <code>lambda</code>, <code>beta</code> y <code>gamma</code>.</li> </ul> </li> <li> <p><code>is_alpha_zero</code>:     Valor booleano que indica si el vector <code>alpha</code> es cero.</p> </li> <li> <p><code>alpha_vec</code>:     Vector de par\u00e1metros de regularizaci\u00f3n.</p> </li> <li> <p><code>point</code>:     Diccionario con la asignaci\u00f3n inicial de valores a las variables.</p> </li> <li> <p>Respuesta:   La API procesa el JSON y, en caso de \u00e9xito, devuelve un archivo Excel que contiene la representaci\u00f3n del problema MPEC generado. La respuesta HTTP incluye las cabeceras:</p> </li> <li> <p><code>Content-Type</code>: <code>application/vnd.openxmlformats-officedocument.spreadsheetml.sheet</code></p> </li> <li> <p><code>Content-Disposition</code>: <code>attachment; filename=&lt;nombre_del_archivo&gt;</code></p> </li> <li> <p>Ejemplo de uso con cURL:</p> </li> </ul> <p>Supongamos que el JSON se encuentra en un archivo llamado <code>problem.json</code>:</p> <p><code>bash   curl -X POST http://&lt;dominio_o_ip&gt;/ \\        -H \"Content-Type: application/json\" \\        -d @problem.json --output problem.xlsx</code></p> <p>Con esta petici\u00f3n, se env\u00eda el contenido del archivo <code>problem.json</code> a la API y se guarda la respuesta (el Excel) en <code>problem.xlsx</code>.</p>"},{"location":"api/#explicacion-del-funcionamiento-interno","title":"Explicaci\u00f3n del Funcionamiento Interno","text":"<p>El c\u00f3digo del servidor en Julia sigue la siguiente l\u00f3gica:</p> <ol> <li> <p>Lectura y Registro:    Se imprime por consola el m\u00e9todo, la URL, los encabezados y el cuerpo de la petici\u00f3n para facilitar la depuraci\u00f3n.</p> </li> <li> <p>Rutas y M\u00e9todos:</p> </li> <li>GET <code>/test</code>:      Si la URL es <code>/test</code> y el m\u00e9todo es <code>GET</code>, se devuelve un mensaje de bienvenida en formato JSON.</li> <li> <p>POST:      Para la petici\u00f3n POST si la url es <code>\\problemgenerator</code>, se intenta leer y parsear el JSON recibido. Si la estructura es v\u00e1lida, se procede a generar el problema llamando a la funci\u00f3n <code>solver_problem</code>, que procesa los datos y genera el archivo Excel.</p> </li> <li> <p>Manejo de Errores:    Si se produce alg\u00fan error al analizar el JSON, se devuelve una respuesta con el c\u00f3digo 400 y un mensaje de error indicando que el formato del JSON es incorrecto.</p> </li> </ol>"},{"location":"api/#buenas-practicas","title":"Buenas Pr\u00e1cticas","text":"<ul> <li> <p>Validaci\u00f3n del JSON:   Aseg\u00farate de que el JSON enviado cumpla exactamente con la estructura esperada para evitar errores en el parseo.</p> </li> <li> <p>Uso de Content-Type:   Al enviar peticiones POST, especifica el encabezado <code>Content-Type: application/json</code> para que el servidor sepa c\u00f3mo interpretar el cuerpo de la petici\u00f3n.</p> </li> <li> <p>Depuraci\u00f3n:   Durante el desarrollo, revisa los logs del servidor (por ejemplo, los <code>println</code>) para verificar que los datos se reciben correctamente.</p> </li> <li> <p>Seguridad:   Si la API se va a exponer en producci\u00f3n, considera agregar autenticaci\u00f3n y validaci\u00f3n adicional para proteger los endpoints.</p> </li> <li> <p>Documentaci\u00f3n:   Mant\u00e9n la documentaci\u00f3n actualizada para reflejar cambios en la estructura del JSON o en el comportamiento de los endpoints.</p> </li> </ul>"},{"location":"api/#otras-formas-de-consumir-la-api","title":"Otras Formas de Consumir la API","text":"<p>Adem\u00e1s de utilizar <code>cURL</code>, puedes integrar la API en tus proyectos usando diferentes lenguajes. Por ejemplo, en Python puedes utilizar el m\u00f3dulo <code>requests</code>:</p> <pre><code>import requests\nimport json\n\n# Definici\u00f3n del JSON a enviar\ndata = {\n    \"vars\": {\n        \"leader\": [],\n        \"follower\": []\n    },\n    \"objective_function\": {\n        \"leader\": \"\",\n        \"follower\": \"\"\n    },\n    \"restrictions\": {\n        \"leader\": [{\n            \"expresion\": \"\",\n            \"restriction_type\": \"\",\n            \"active_index_type\": \"\",\n            \"miu\": 0.4\n        }],\n        \"follower\": [{\n            \"expresion\": \"\",\n            \"restriction_type\": \"\",\n            \"active_index_type\": \"\",\n            \"lambda\": 0.1,\n            \"beta\": 0.9,\n            \"gamma\": 0.4\n        }]\n    },\n    \"is_alpha_zero\": False,\n    \"alpha_vec\": [2.3, 293],\n    \"point\": {\n        \"x_1\": 2.2\n    }\n}\n\n# Env\u00edo de la petici\u00f3n POST\nurl = \"http://&lt;dominio_o_ip&gt;/\"\nheaders = {\"Content-Type\": \"application/json\"}\nresponse = requests.post(url, data=json.dumps(data), headers=headers)\n\nif response.status_code == 200:\n    # Guarda el archivo Excel recibido\n    with open(\"problem.xlsx\", \"wb\") as f:\n        f.write(response.content)\n    print(\"Archivo Excel descargado correctamente.\")\nelse:\n    print(\"Error:\", response.text)\n</code></pre> <p>Esta documentaci\u00f3n permite a los desarrolladores comprender c\u00f3mo interactuar con la API de <code>ProblemGenerator</code> y generar el archivo Excel con la representaci\u00f3n del problema MPEC definido. Recuerda reemplazar <code>&lt;dominio_o_ip&gt;</code> por la direcci\u00f3n correspondiente donde se encuentre desplegada la API.</p> <p>\u00a1Con esto ya est\u00e1s listo para comenzar a integrar y utilizar la API en tus proyectos!</p>"}]}